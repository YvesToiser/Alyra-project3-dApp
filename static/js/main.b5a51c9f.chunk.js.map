{"version":3,"sources":["getWeb3.js","components/Address.js","components/Workflow.js","components/Whitelist.js","components/Proposals.js","App.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","givenProvider","eth","requestAccounts","on","alert","location","reload","console","log","provider","providers","HttpProvider","Address","state","balance","network","componentDidMount","getBalance","getNetwork","this","props","address","toString","result","utils","fromWei","roundBalance","setState","getChainId","switchNetwork","_balance","dotPosition","indexOf","slice","_address","substr","networkId","id","shortenAddress","React","Component","Workflow","startProposalsRegistering","contract","methods","send","from","accounts","onWorkflowChange","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","wfBox","workflowStatus","className","isOwner","onClick","renderWorkflow0","renderWorkflow1","renderWorkflow2","renderWorkflow3","renderWorkflow4","renderWorkflow5","workflowStatusDisplay","Whitelist","addVoter","voterAddress","document","getElementById","value","match","onWhitelistChange","type","class","whitelist","map","a","isVoter","list","push","i","voteList","length","proposal","renderWhitelistStatus","renderWhitelistManagement","Proposals","addProposal","proposalDescription","onProposalChange","voteForProposal","_i","hasVoted","setVote","onVoteChange","proposalList","prop","description","winningProposal","renderProposalSubmission","renderProposals","App","proposalCount","OWNER_ADDRESS","CONTRACT_GENESIS_BLOCK","initWeb3","error","updateWorkflowStatus","updateWhitelist","updateRoles","updateProposalList","getAccounts","net","getId","deployedNetwork","VotingContract","networks","Contract","abi","call","setWinner","options","fromBlock","toBlock","getPastEvents","voterEventsList","voter","returnValues","includes","updateVoteStatus","votesEventsList","proposalId","getOneProposal","proposalEventsList","winningProposalID","winnerId","ReactDOM","render"],"mappings":"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","file":"static/js/main.b5a51c9f.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        window.addEventListener(\"load\", async () => {\n            // Modern dapp browsers...\n            if (window.ethereum) {\n                // const web3 = new Web3(window.ethereum);\n                const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n                try {\n                    // Request account access if needed\n                    // await window.ethereum.enable();\n                    await web3.eth.requestAccounts();\n                    // Accounts now exposed\n                    resolve(web3);\n                    window.ethereum.on('disconnect',function(){\n                        alert(\"il faut se connecter\");\n                    });\n                    window.ethereum.on('accountsChanged',function(){\n                        window.location.reload();\n                    });\n                    window.ethereum.on('chainChanged',function(){\n                        window.location.reload();\n                    });\n\n                } catch (error) {\n                    reject(error);\n                }\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n                // Use Mist/MetaMask's provider.\n                const web3 = window.web3;\n                console.log(\"Injected web3 detected.\");\n                resolve(web3);\n            }\n            // Fallback to localhost; use dev console port by default...\n            else {\n                const provider = new Web3.providers.HttpProvider(\n                    \"http://127.0.0.1:8545\"\n                );\n                const web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                resolve(web3);\n            }\n        });\n    });\n\nexport default getWeb3;","import React from 'react';\n\nexport default class Address extends React.Component {\n\n    state = {\n        balance: null,\n        network: null,\n    };\n\n    componentDidMount = async () => {\n        this.getBalance();\n        this.getNetwork();\n    };\n\n    async getBalance() {\n        const result = await this.props.web3.eth.getBalance(this.props.address.toString());\n        let balance = this.props.web3.utils.fromWei(result, \"ether\") + \" ETH\";\n        balance = this.roundBalance(balance);\n        this.setState({ balance });\n    }\n\n    async getNetwork() {\n        const result = await this.props.web3.eth.getChainId();\n        const network = this.switchNetwork(result.toString());\n        this.setState({ network });\n    }\n\n    roundBalance(_balance) {\n        const dotPosition = _balance.indexOf('.');\n        return _balance.slice(0, dotPosition + 4);\n    }\n\n    shortenAddress(_address) {\n        if (_address) {\n            const beginning = _address.substr(0, 7);\n            const ending = _address.substr(35, 5);\n            return beginning + '...' + ending;\n        }\n    }\n\n    switchNetwork(networkId) {\n        switch (networkId) {\n            case '1' :\n                return 'Ethereum Mainnet';\n            case '3' :\n                return 'Ropsten';\n            case '5' :\n                return 'Görli';\n            case '42' :\n                return 'Kovan';\n            case '1337' :\n                return 'LocalHost';\n            default:\n                return 'Wrong Network';\n        }\n    }\n\n    render(){\n        return(\n            <div id='addressBlock'>\n                <div id='addressBox'>\n                    <span id='balance'>\n                        {this.state.balance}\n                    </span>\n                    <span id='address'>\n                        {this.shortenAddress(this.props.address.toString())}\n                    </span>\n                </div>\n                <div id='networkBox'>\n                    {this.state.network}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport default class Workflow extends React.Component {\n\n    startProposalsRegistering = async () => {\n        await this.props.contract.methods.startProposalsRegistering().send({ from: this.props.accounts[0] });\n        this.props.onWorkflowChange()\n    };\n\n    endProposalsRegistering = async () => {\n        await this.props.contract.methods.endProposalsRegistering().send({ from: this.props.accounts[0] });\n        this.props.onWorkflowChange()\n    };\n\n    startVotingSession = async () => {\n        await this.props.contract.methods.startVotingSession().send({ from: this.props.accounts[0] });\n        this.props.onWorkflowChange()\n    };\n\n    endVotingSession = async () => {\n        await this.props.contract.methods.endVotingSession().send({ from: this.props.accounts[0] });\n        this.props.onWorkflowChange()\n    };\n\n    tallyVotes = async () => {\n        await this.props.contract.methods.tallyVotes().send({ from: this.props.accounts[0] });\n        this.props.onWorkflowChange()\n    };\n\n    renderWorkflow0() {\n        let wfBox = \"wfBox\";\n        if (this.props.workflowStatus === '0') {\n            wfBox = \"wfBoxSelected\";\n        }\n        return <div className={wfBox}>\n            Registering Voters\n        </div>\n    }\n\n    renderWorkflow1() {\n        let wfBox = \"wfBox\";\n        if (this.props.workflowStatus === '1') {\n            wfBox = \"wfBoxSelected\";\n        }\n        if (this.props.workflowStatus === '0' && this.props.isOwner) {\n            return <div>\n            <button className=\"wfButton\" onClick={this.startProposalsRegistering}>Start proposals registering</button>\n        </div>\n        } else {\n            return <div className={wfBox}>\n                Proposals Registration Started\n            </div>\n        }\n    }\n\n    renderWorkflow2() {\n        let wfBox = \"wfBox\";\n        if (this.props.workflowStatus === '2') {\n            wfBox = \"wfBoxSelected\";\n        }\n        if (this.props.workflowStatus === '1' && this.props.isOwner) {\n            return <div>\n                <button className=\"wfButton\" onClick={this.endProposalsRegistering}>End proposals registering</button>\n            </div>\n        } else {\n            return <div className={wfBox}>\n                Proposals Registration Ended\n            </div>\n        }\n    }\n\n    renderWorkflow3() {\n        let wfBox = \"wfBox\";\n        if (this.props.workflowStatus === '3') {\n            wfBox = \"wfBoxSelected\";\n        }\n        if (this.props.workflowStatus === '2' && this.props.isOwner) {\n            return <div>\n                <button className=\"wfButton\" onClick={this.startVotingSession}>Start voting session</button>\n            </div>\n        } else {\n            return <div className={wfBox}>\n                Voting Session Started\n            </div>\n        }\n    }\n\n    renderWorkflow4() {\n        let wfBox = \"wfBox\";\n        if (this.props.workflowStatus === '4') {\n            wfBox = \"wfBoxSelected\";\n        }\n        if (this.props.workflowStatus === '3' && this.props.isOwner) {\n            return <div>\n                <button className=\"wfButton\" onClick={this.endVotingSession}>End voting session</button>\n            </div>\n        } else {\n            return <div className={wfBox}>\n                Voting Session Ended\n            </div>\n        }\n    }\n\n    renderWorkflow5() {\n        let wfBox = \"wfBox\";\n        if (this.props.workflowStatus === '5') {\n            wfBox = \"wfBoxSelected\";\n        }\n        if (this.props.workflowStatus === '4' && this.props.isOwner) {\n            return <div>\n                <button className=\"wfButton\" onClick={this.tallyVotes}>Tally votes</button>\n            </div>\n        } else {\n            return <div className={wfBox}>\n                Votes Tallied\n            </div>\n        }\n    }\n\n    workflowStatusDisplay() {\n        return <div>\n            { this.renderWorkflow0() }\n            { this.renderWorkflow1() }\n            { this.renderWorkflow2() }\n            { this.renderWorkflow3() }\n            { this.renderWorkflow4() }\n            { this.renderWorkflow5() }\n        </div>\n    }\n\n    render() {\n        return(\n            <div id='workflow'>\n                { this.workflowStatusDisplay() }\n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport default class Whitelist extends React.Component {\n\n    addVoter = async () => {\n        let voterAddress = document.getElementById(\"addVoterButton\").value;\n        if (voterAddress.match(/^0x[a-fA-F0-9]{40}$/)) {\n            await this.props.contract.methods.addVoter(voterAddress).send({from: this.props.accounts[0]});\n            await this.props.onWhitelistChange();\n        } else {\n            // show error message\n        }\n        document.getElementById('addVoterButton').value = \"\";\n    };\n\n    renderWhitelistManagement() {\n        if(this.props.isOwner) {\n            if (this.props.workflowStatus === '0') {\n                return <div>\n                    <h3>Whitelist Management : </h3>\n                    <input type=\"text\" id=\"addVoterButton\"/>\n                    <button class=\"button\" onClick={this.addVoter}>Add on Whitelist</button>\n                    <p>Here is the list of whitelisted addresses :</p>\n                    <table class='whitelistTable'>\n                        <tbody class='tableBody'>\n                        {this.props.whitelist.map((a) => (\n                            <tr key={a}><td>{a}</td></tr>\n                        ))}\n                        </tbody>\n                    </table>\n                </div>\n            } else {\n                return <div>\n                    <h3>Whitelist Management : </h3>\n                    <p>Whitelist registration is closed. You can not add voters any more.</p>\n                    <p>Here is the list of whitelisted addresses :</p>\n                    <table class='whitelistTable'>\n                        <tbody className='tableBody'>\n                        {this.props.whitelist.map((a) => (\n                            <tr key={a}><td>{a}</td></tr>\n                        ))}\n                        </tbody>\n                    </table>\n                </div>\n            }\n        }\n    }\n\n    renderWhitelistStatus() {\n        if(this.props.isVoter) {\n            if (this.props.workflowStatus === '5') {\n                const list = [];\n                list.push(<tr><td>Voter address</td><td>vote</td></tr>);\n                for (let i = 0; i < this.props.voteList.length; i++) {\n                    list.push(<tr>\n                        <td>{this.props.voteList[i].voterAddress.toString()}</td>\n                        <td>{this.props.voteList[i].proposal.toString()}</td>\n                    </tr>);\n                }\n                return <div>\n                    <p>You can see how the participants have voted below. Participants who are not in the list below have not voted.</p>\n                    <table className='whitelistTable'>\n                        <tbody className='tableBody'>\n                            {list}\n                        </tbody>\n                    </table>\n                </div>\n            }\n            return <p>Congratulations! You have been registered in the whitelist.\n                Check the workflow status to see if you can add proposals or vote.</p>\n        } else {\n            return <p>You are not registered in the whitelist.</p>\n        }\n    }\n\n    render(){\n        return(\n            <div id='whitelist'>\n                <h3>Whitelist Status</h3>\n                { this.renderWhitelistStatus() }\n                { this.renderWhitelistManagement() }\n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport default class Proposals extends React.Component {\n\n    addProposal = async () => {\n        let proposalDescription = document.getElementById(\"addProposalButton\").value;\n        if (proposalDescription.match(/.*\\S.*/)) {\n            await this.props.contract.methods.addProposal(proposalDescription).send({ from: this.props.accounts[0] });\n            await this.props.onProposalChange();\n        } else {\n            // show error message\n        }\n        document.getElementById('addProposalButton').value = \"\";\n    };\n\n    voteForProposal = async (_i) => {\n        if (!this.props.hasVoted) {\n            await this.props.contract.methods.setVote(_i).send({ from: this.props.accounts[0] });\n            await this.props.onVoteChange();\n        }\n    };\n\n    renderProposals () {\n        const proposalList =\n        <table className='whitelistTable'>\n            <tbody className='tableBody'>\n            {this.props.proposalList.map((prop) => (\n                <tr>\n                    <td>{prop.description}</td>\n                </tr>\n            ))}\n            </tbody>\n        </table>;\n\n        if (this.props.isVoter){\n            if (this.props.workflowStatus === '0' || this.props.workflowStatus === '1' || this.props.workflowStatus === '2') {\n                return <div>\n                    <p>You are registered but the vote has not opened yet. </p>\n                    {proposalList}\n                </div>\n            }\n            if (this.props.workflowStatus === '3') {\n                if (this.props.hasVoted) {\n                    return <div>\n                        <p>You are registered and have already voted. Please wait before the results are available. </p>\n                        {proposalList}\n                    </div>\n                } else {\n                    const list = [];\n                    for (let i = 0; i < this.props.proposalList.length; i++) {\n                        list.push(\n                            <tr><td>{this.props.proposalList[i].description}</td>\n                                <td><button className=\"button\" onClick={() => this.voteForProposal(i)}>Vote for this proposal</button></td></tr>\n                        );\n                    }\n                    return <table className='whitelistTable'>\n                        <tbody className='tableBody'>\n                        {list}\n                        </tbody>\n                    </table>\n                }\n            }\n            if (this.props.workflowStatus === '5') {\n                return <div>\n                    <p>The vote has ended. The winning proposal is : </p>\n                    <span id=\"winner\">\n                        {this.props.winningProposal}\n                    </span>\n                </div>\n            }\n        }\n    };\n\n    renderProposalSubmission () {\n        if (!this.props.isVoter) {\n            return <div>\n                <p>You are not registered. So you can not participate. Sorry for the inconvenience.</p>\n            </div>\n        } else {\n            if(this.props.workflowStatus === '0') {\n                return <div>\n                    <p>The proposal registration has not started yet.</p>\n                </div>\n            } else if (this.props.workflowStatus === '1') {\n                return <div>\n                    <input type=\"text\" id=\"addProposalButton\"/>\n                    <button className=\"button\" onClick={this.addProposal}>Add proposal</button>\n                </div>\n            } else if (this.props.workflowStatus === '2') {\n                return <div>\n                    <p>The proposal registration has Ended. Vote will start soon.</p>\n                </div>\n            } else if (this.props.workflowStatus === '3' && !this.props.hasVoted) {\n                return <div>\n                    <p>The vote is open. You can vote for your favorite proposal.</p>\n                </div>\n            } else if (this.props.workflowStatus === '4') {\n                return <div>\n                    <p>The vote has ended. Results will be published soon.</p>\n                </div>\n            }\n        }\n    }\n\n    render(){\n        return(\n            <div id='proposals'>\n                <h3>Proposals</h3>\n                { this.renderProposalSubmission() }\n                { this.renderProposals() }\n            </div>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Address from \"./components/Address.js\";\nimport Workflow from \"./components/Workflow\";\nimport Whitelist from \"./components/Whitelist\";\nimport Proposals from \"./components/Proposals\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n    state = {\n        web3: null,\n        accounts: null,\n        contract: null,\n        workflowStatus: null,\n        isOwner: null,\n        isVoter: null,\n        hasVoted: null,\n        whitelist: [],\n        proposalList: [],\n        voteList: [],\n        proposalCount: 0,\n        winningProposal: null\n    };\n\n    OWNER_ADDRESS = '0x00adF40C31239299e5ce1196a89499E6e4e4850c';\n    CONTRACT_GENESIS_BLOCK = 0; // In the case of localhost blockchain => 0.\n\n    componentDidMount = async () => {\n        try {\n            await this.initWeb3();\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`,\n            );\n            console.error(error);\n        }\n\n        await this.updateWorkflowStatus();\n\n        await this.updateWhitelist();\n\n        await this.updateRoles();\n\n        await this.updateProposalList();\n    };\n\n    initWeb3 = async () => {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VotingContract.networks[networkId];\n        const contract = new web3.eth.Contract(\n            VotingContract.abi,\n            deployedNetwork && deployedNetwork.address,\n        );\n\n        this.setState({ web3, accounts, contract });\n    };\n\n    updateWorkflowStatus = async () => {\n        const workflowStatus = await this.state.contract.methods.workflowStatus().call({ from: this.state.accounts[0] });\n        this.setState({ workflowStatus });\n        if (workflowStatus === '5') {\n            await this.setWinner();\n        }\n    };\n\n    updateWhitelist = async () => {\n        // As there is no option for removal from the whitelist, we can use the event logs.\n        // It is safest to check all the events history.\n        // To avoid browsing all the blockchain we will start from the block when the contract is launched.\n        let options = {\n            fromBlock: this.CONTRACT_GENESIS_BLOCK,\n            toBlock: 'latest'\n        };\n        let voterEventsList = await this.state.contract.getPastEvents('VoterRegistered', options);\n        const whitelist = [];\n        voterEventsList.map( (voter) => (\n            whitelist.push(voter.returnValues.voterAddress.toString())\n        ));\n        this.setState({ whitelist });\n    };\n\n    updateRoles = async () => {\n        // check if is owner\n        const isOwner = (this.state.accounts.toString() === this.OWNER_ADDRESS);\n        this.setState({ isOwner });\n\n        // Check if is voter\n        const isVoter = this.state.whitelist.includes(this.state.accounts.toString());\n        this.setState({ isVoter });\n\n        // Check if voter has already voted\n        await this.updateVoteStatus();\n    };\n\n    updateVoteStatus = async () => {\n        // As there is no cancellation of vote, we can use the event logs.\n        // It is safest to check all the events history.\n        // To avoid browsing all the blockchain we will start from the block when the contract is launched.\n        let options = {\n            fromBlock: this.CONTRACT_GENESIS_BLOCK,\n            toBlock: 'latest'\n        };\n        let votesEventsList = await this.state.contract.getPastEvents('Voted', options);\n        let hasVoted = false;\n        let voteList = [];\n        for (let i = 0; i < votesEventsList.length; i++) {\n            if (votesEventsList[i].returnValues.voter.toString() === this.state.accounts[0]) {\n                hasVoted = true;\n            }\n            const proposalId = votesEventsList[i].returnValues.proposalId.toString()\n            const proposal = await this.state.contract.methods.getOneProposal(proposalId).call({from: this.state.accounts[0]});\n            voteList.push({\n                voterAddress : votesEventsList[i].returnValues.voter.toString(),\n                proposal : proposal.description\n            })\n        }\n        this.setState({hasVoted, voteList});\n    };\n\n    updateProposalList = async () => {\n        // As there is no option to remove a proposal, we can use the event logs.\n        // It is safest to check all the events history.\n        // To avoid browsing all the blockchain we will start from the block when the contract is launched.\n        if (this.state.isVoter) {\n            let options = {\n                fromBlock: this.CONTRACT_GENESIS_BLOCK,\n                toBlock: 'latest'\n            };\n            let proposalEventsList = await this.state.contract.getPastEvents('ProposalRegistered', options);\n            let proposalCount = proposalEventsList.length;\n            this.setState({ proposalCount });\n            const proposalList = [];\n            for (let i = 0; i < this.state.proposalCount; i++) {\n                const result = await this.state.contract.methods.getOneProposal(i).call({from: this.state.accounts[0]});\n                proposalList.push(result);\n            }\n            this.setState({ proposalList });\n        }\n    };\n\n    setWinner = async () => {\n        const winnerId = await this.state.contract.methods.winningProposalID().call({ from: this.state.accounts[0] });\n        const winningProposal = await this.state.contract.methods.getOneProposal(winnerId).call({ from: this.state.accounts[0] });\n        this.setState({ winningProposal: winningProposal.description });\n    };\n\n    render() {\n        if (!this.state.web3) {\n            return <div>Loading Web3, accounts, and contract...</div>;\n        }\n        return (\n            <div className=\"App\">\n                <div id='header'>\n                    <Address\n                        address={this.state.accounts}\n                        web3={this.state.web3}\n                    />\n                </div>\n                <Workflow\n                    workflowStatus={this.state.workflowStatus}\n                    accounts={this.state.accounts}\n                    contract={this.state.contract}\n                    isOwner={this.state.isOwner}\n                    onWorkflowChange={this.updateWorkflowStatus}\n                />\n                <div id='container'>\n                    <Whitelist\n                        workflowStatus={this.state.workflowStatus}\n                        accounts={this.state.accounts}\n                        contract={this.state.contract}\n                        isOwner={this.state.isOwner}\n                        isVoter={this.state.isVoter}\n                        whitelist={this.state.whitelist}\n                        voteList={this.state.voteList}\n                        onWhitelistChange={this.updateWhitelist}\n                    />\n                    <Proposals\n                        workflowStatus={this.state.workflowStatus}\n                        accounts={this.state.accounts}\n                        contract={this.state.contract}\n                        isVoter={this.state.isVoter}\n                        hasVoted={this.state.hasVoted}\n                        proposalList={this.state.proposalList}\n                        winningProposal={this.state.winningProposal}\n                        onProposalChange={this.updateProposalList}\n                        onVoteChange={this.updateVoteStatus}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}